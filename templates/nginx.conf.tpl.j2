worker_processes {{ base_struct.get("worker") }};
user {{ base_struct.get("user") }};

events {
    use epoll;
    worker_connections 128;
}

error_log /var/log/nginx/error.log error;

http {
    server_tokens off;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '"$time_local" $status $remote_addr '
    '$request_method "$request" '
    '$request_length '
    '$status $bytes_sent '
    '$body_bytes_sent '
    '$http_referer '
    '"$http_user_agent" '
    '$upstream_addr '
    '$upstream_status '
    '$request_time '
    '$upstream_response_time '
    '$upstream_connect_time '
    '$request_body';

    access_log /var/log/nginx/access.log main;

    proxy_cache_path {{ base_struct.get("proxy_cache").get('path') }} levels=1:2 keys_zone={{ base_struct.get("proxy_cache").get('keys_zone_name') }}:{{ base_struct.get("proxy_cache").get('keys_zone_size') }} inactive={{ base_struct.get("proxy_cache").get('inactive') }} max_size={{ base_struct.get("proxy_cache").get('max_size') }};

    map $arg_app $app_destination {
    {% for arg_value, location in base_struct.get("dynamic_routes_map").items() -%}
        "{{arg_value}}" "{{location}}";
    {% endfor -%}
        default ${{ base_struct.get("default_destination_location").get('name') }};
    }

    server {
        server_name localhost;
        listen 8080;

    {% for ip in base_struct.get("blocked_ips") -%}
        deny {{ ip }};
    {% endfor -%}

        keepalive_timeout {{ base_struct.get("keepalive_timeout") }};
        # defualt uri for static
        set ${{ base_struct.get("default_destination_location").get('name') }} "{{ base_struct.get("default_destination_location").get('value') }}";

        location / {
            # use 127.0.0.01 as workaround for avoiding dns resolving in docker
            proxy_pass $scheme://127.0.0.1:$server_port/$app_destination/;
            proxy_set_header Host localhost-1;
            proxy_set_header Connection "";
            proxy_http_version 1.1;

            proxy_cache {{ base_struct.get("proxy_cache").get('keys_zone_name') }};
            proxy_cache_valid 200 1h;
            proxy_cache_min_uses {{ base_struct.get("proxy_cache").get('min_uses') }};
            # a stale cached response can be used during communication with the proxied server
            proxy_cache_use_stale error timeout invalid_header updating
            http_500 http_502 http_503 http_504;
        }
        proxy_redirect off;

        proxy_connect_timeout 3;
        proxy_read_timeout 50;
        proxy_send_timeout 50;
    }

    server {
        server_name localhost-1;
        listen 8080;

        location {{ base_struct.get("default_destination_location").get('value') }} {
            index index.html;
            alias {{ base_struct.get("default_destination_location").get('alias') }};
        }

        location / {
            try_files $uri/index.html =404;
            expires 1d;
            access_log off;
            root {{ base_struct.get("app_root_dir") }};
        }
    }
}